// Code generated by MockGen. DO NOT EDIT.
// Source: pb/service_grpc.pb.go

// Package mockservices is a generated GoMock package.
package mockservices

import (
	context "context"
	pb "gateway/pb"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMyServiceClient is a mock of MyServiceClient interface.
type MockMyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMyServiceClientMockRecorder
}

// MockMyServiceClientMockRecorder is the mock recorder for MockMyServiceClient.
type MockMyServiceClientMockRecorder struct {
	mock *MockMyServiceClient
}

// NewMockMyServiceClient creates a new mock instance.
func NewMockMyServiceClient(ctrl *gomock.Controller) *MockMyServiceClient {
	mock := &MockMyServiceClient{ctrl: ctrl}
	mock.recorder = &MockMyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMyServiceClient) EXPECT() *MockMyServiceClientMockRecorder {
	return m.recorder
}

// AdminLoginWithPassword mocks base method.
func (m *MockMyServiceClient) AdminLoginWithPassword(ctx context.Context, in *pb.LoginWithPasswordRequest, opts ...grpc.CallOption) (*pb.LoginWithPasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminLoginWithPassword", varargs...)
	ret0, _ := ret[0].(*pb.LoginWithPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminLoginWithPassword indicates an expected call of AdminLoginWithPassword.
func (mr *MockMyServiceClientMockRecorder) AdminLoginWithPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminLoginWithPassword", reflect.TypeOf((*MockMyServiceClient)(nil).AdminLoginWithPassword), varargs...)
}

// CreateUser mocks base method.
func (m *MockMyServiceClient) CreateUser(ctx context.Context, in *pb.CreateUserRequest, opts ...grpc.CallOption) (*pb.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*pb.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMyServiceClientMockRecorder) CreateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMyServiceClient)(nil).CreateUser), varargs...)
}

// CreateUserWithOtp mocks base method.
func (m *MockMyServiceClient) CreateUserWithOtp(ctx context.Context, in *pb.CreateUserWithOtpRequest, opts ...grpc.CallOption) (*pb.CreateUserWithOtpResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserWithOtp", varargs...)
	ret0, _ := ret[0].(*pb.CreateUserWithOtpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWithOtp indicates an expected call of CreateUserWithOtp.
func (mr *MockMyServiceClientMockRecorder) CreateUserWithOtp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithOtp", reflect.TypeOf((*MockMyServiceClient)(nil).CreateUserWithOtp), varargs...)
}

// LoginOtpValidation mocks base method.
func (m *MockMyServiceClient) LoginOtpValidation(ctx context.Context, in *pb.OtpValidationRequest, opts ...grpc.CallOption) (*pb.LoginOtpValidationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginOtpValidation", varargs...)
	ret0, _ := ret[0].(*pb.LoginOtpValidationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginOtpValidation indicates an expected call of LoginOtpValidation.
func (mr *MockMyServiceClientMockRecorder) LoginOtpValidation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginOtpValidation", reflect.TypeOf((*MockMyServiceClient)(nil).LoginOtpValidation), varargs...)
}

// LoginWithOtp mocks base method.
func (m *MockMyServiceClient) LoginWithOtp(ctx context.Context, in *pb.LoginWithOtpRequest, opts ...grpc.CallOption) (*pb.LoginWithOtpResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginWithOtp", varargs...)
	ret0, _ := ret[0].(*pb.LoginWithOtpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWithOtp indicates an expected call of LoginWithOtp.
func (mr *MockMyServiceClientMockRecorder) LoginWithOtp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithOtp", reflect.TypeOf((*MockMyServiceClient)(nil).LoginWithOtp), varargs...)
}

// LoginWithPassword mocks base method.
func (m *MockMyServiceClient) LoginWithPassword(ctx context.Context, in *pb.LoginWithPasswordRequest, opts ...grpc.CallOption) (*pb.LoginWithPasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginWithPassword", varargs...)
	ret0, _ := ret[0].(*pb.LoginWithPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWithPassword indicates an expected call of LoginWithPassword.
func (mr *MockMyServiceClientMockRecorder) LoginWithPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithPassword", reflect.TypeOf((*MockMyServiceClient)(nil).LoginWithPassword), varargs...)
}

// MyMethod mocks base method.
func (m *MockMyServiceClient) MyMethod(ctx context.Context, in *pb.Request, opts ...grpc.CallOption) (*pb.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MyMethod", varargs...)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MyMethod indicates an expected call of MyMethod.
func (mr *MockMyServiceClientMockRecorder) MyMethod(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyMethod", reflect.TypeOf((*MockMyServiceClient)(nil).MyMethod), varargs...)
}

// RegisterAdmin mocks base method.
func (m *MockMyServiceClient) RegisterAdmin(ctx context.Context, in *pb.RegisterAdminRequest, opts ...grpc.CallOption) (*pb.RegisterAdminResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterAdmin", varargs...)
	ret0, _ := ret[0].(*pb.RegisterAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAdmin indicates an expected call of RegisterAdmin.
func (mr *MockMyServiceClientMockRecorder) RegisterAdmin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAdmin", reflect.TypeOf((*MockMyServiceClient)(nil).RegisterAdmin), varargs...)
}

// SignupOtpValidation mocks base method.
func (m *MockMyServiceClient) SignupOtpValidation(ctx context.Context, in *pb.OtpValidationRequest, opts ...grpc.CallOption) (*pb.OtpValidationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignupOtpValidation", varargs...)
	ret0, _ := ret[0].(*pb.OtpValidationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignupOtpValidation indicates an expected call of SignupOtpValidation.
func (mr *MockMyServiceClientMockRecorder) SignupOtpValidation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignupOtpValidation", reflect.TypeOf((*MockMyServiceClient)(nil).SignupOtpValidation), varargs...)
}

// MockMyServiceServer is a mock of MyServiceServer interface.
type MockMyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMyServiceServerMockRecorder
}

// MockMyServiceServerMockRecorder is the mock recorder for MockMyServiceServer.
type MockMyServiceServerMockRecorder struct {
	mock *MockMyServiceServer
}

// NewMockMyServiceServer creates a new mock instance.
func NewMockMyServiceServer(ctrl *gomock.Controller) *MockMyServiceServer {
	mock := &MockMyServiceServer{ctrl: ctrl}
	mock.recorder = &MockMyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMyServiceServer) EXPECT() *MockMyServiceServerMockRecorder {
	return m.recorder
}

// AdminLoginWithPassword mocks base method.
func (m *MockMyServiceServer) AdminLoginWithPassword(arg0 context.Context, arg1 *pb.LoginWithPasswordRequest) (*pb.LoginWithPasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminLoginWithPassword", arg0, arg1)
	ret0, _ := ret[0].(*pb.LoginWithPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminLoginWithPassword indicates an expected call of AdminLoginWithPassword.
func (mr *MockMyServiceServerMockRecorder) AdminLoginWithPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminLoginWithPassword", reflect.TypeOf((*MockMyServiceServer)(nil).AdminLoginWithPassword), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockMyServiceServer) CreateUser(arg0 context.Context, arg1 *pb.CreateUserRequest) (*pb.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMyServiceServerMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMyServiceServer)(nil).CreateUser), arg0, arg1)
}

// CreateUserWithOtp mocks base method.
func (m *MockMyServiceServer) CreateUserWithOtp(arg0 context.Context, arg1 *pb.CreateUserWithOtpRequest) (*pb.CreateUserWithOtpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserWithOtp", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateUserWithOtpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWithOtp indicates an expected call of CreateUserWithOtp.
func (mr *MockMyServiceServerMockRecorder) CreateUserWithOtp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithOtp", reflect.TypeOf((*MockMyServiceServer)(nil).CreateUserWithOtp), arg0, arg1)
}

// LoginOtpValidation mocks base method.
func (m *MockMyServiceServer) LoginOtpValidation(arg0 context.Context, arg1 *pb.OtpValidationRequest) (*pb.LoginOtpValidationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginOtpValidation", arg0, arg1)
	ret0, _ := ret[0].(*pb.LoginOtpValidationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginOtpValidation indicates an expected call of LoginOtpValidation.
func (mr *MockMyServiceServerMockRecorder) LoginOtpValidation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginOtpValidation", reflect.TypeOf((*MockMyServiceServer)(nil).LoginOtpValidation), arg0, arg1)
}

// LoginWithOtp mocks base method.
func (m *MockMyServiceServer) LoginWithOtp(arg0 context.Context, arg1 *pb.LoginWithOtpRequest) (*pb.LoginWithOtpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWithOtp", arg0, arg1)
	ret0, _ := ret[0].(*pb.LoginWithOtpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWithOtp indicates an expected call of LoginWithOtp.
func (mr *MockMyServiceServerMockRecorder) LoginWithOtp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithOtp", reflect.TypeOf((*MockMyServiceServer)(nil).LoginWithOtp), arg0, arg1)
}

// LoginWithPassword mocks base method.
func (m *MockMyServiceServer) LoginWithPassword(arg0 context.Context, arg1 *pb.LoginWithPasswordRequest) (*pb.LoginWithPasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWithPassword", arg0, arg1)
	ret0, _ := ret[0].(*pb.LoginWithPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWithPassword indicates an expected call of LoginWithPassword.
func (mr *MockMyServiceServerMockRecorder) LoginWithPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithPassword", reflect.TypeOf((*MockMyServiceServer)(nil).LoginWithPassword), arg0, arg1)
}

// MyMethod mocks base method.
func (m *MockMyServiceServer) MyMethod(arg0 context.Context, arg1 *pb.Request) (*pb.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyMethod", arg0, arg1)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MyMethod indicates an expected call of MyMethod.
func (mr *MockMyServiceServerMockRecorder) MyMethod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyMethod", reflect.TypeOf((*MockMyServiceServer)(nil).MyMethod), arg0, arg1)
}

// RegisterAdmin mocks base method.
func (m *MockMyServiceServer) RegisterAdmin(arg0 context.Context, arg1 *pb.RegisterAdminRequest) (*pb.RegisterAdminResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAdmin", arg0, arg1)
	ret0, _ := ret[0].(*pb.RegisterAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAdmin indicates an expected call of RegisterAdmin.
func (mr *MockMyServiceServerMockRecorder) RegisterAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAdmin", reflect.TypeOf((*MockMyServiceServer)(nil).RegisterAdmin), arg0, arg1)
}

// SignupOtpValidation mocks base method.
func (m *MockMyServiceServer) SignupOtpValidation(arg0 context.Context, arg1 *pb.OtpValidationRequest) (*pb.OtpValidationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignupOtpValidation", arg0, arg1)
	ret0, _ := ret[0].(*pb.OtpValidationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignupOtpValidation indicates an expected call of SignupOtpValidation.
func (mr *MockMyServiceServerMockRecorder) SignupOtpValidation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignupOtpValidation", reflect.TypeOf((*MockMyServiceServer)(nil).SignupOtpValidation), arg0, arg1)
}

// mustEmbedUnimplementedMyServiceServer mocks base method.
func (m *MockMyServiceServer) mustEmbedUnimplementedMyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMyServiceServer")
}

// mustEmbedUnimplementedMyServiceServer indicates an expected call of mustEmbedUnimplementedMyServiceServer.
func (mr *MockMyServiceServerMockRecorder) mustEmbedUnimplementedMyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMyServiceServer", reflect.TypeOf((*MockMyServiceServer)(nil).mustEmbedUnimplementedMyServiceServer))
}

// MockUnsafeMyServiceServer is a mock of UnsafeMyServiceServer interface.
type MockUnsafeMyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMyServiceServerMockRecorder
}

// MockUnsafeMyServiceServerMockRecorder is the mock recorder for MockUnsafeMyServiceServer.
type MockUnsafeMyServiceServerMockRecorder struct {
	mock *MockUnsafeMyServiceServer
}

// NewMockUnsafeMyServiceServer creates a new mock instance.
func NewMockUnsafeMyServiceServer(ctrl *gomock.Controller) *MockUnsafeMyServiceServer {
	mock := &MockUnsafeMyServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMyServiceServer) EXPECT() *MockUnsafeMyServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMyServiceServer mocks base method.
func (m *MockUnsafeMyServiceServer) mustEmbedUnimplementedMyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMyServiceServer")
}

// mustEmbedUnimplementedMyServiceServer indicates an expected call of mustEmbedUnimplementedMyServiceServer.
func (mr *MockUnsafeMyServiceServerMockRecorder) mustEmbedUnimplementedMyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMyServiceServer", reflect.TypeOf((*MockUnsafeMyServiceServer)(nil).mustEmbedUnimplementedMyServiceServer))
}

// MockAdminDashboardClient is a mock of AdminDashboardClient interface.
type MockAdminDashboardClient struct {
	ctrl     *gomock.Controller
	recorder *MockAdminDashboardClientMockRecorder
}

// MockAdminDashboardClientMockRecorder is the mock recorder for MockAdminDashboardClient.
type MockAdminDashboardClientMockRecorder struct {
	mock *MockAdminDashboardClient
}

// NewMockAdminDashboardClient creates a new mock instance.
func NewMockAdminDashboardClient(ctrl *gomock.Controller) *MockAdminDashboardClient {
	mock := &MockAdminDashboardClient{ctrl: ctrl}
	mock.recorder = &MockAdminDashboardClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminDashboardClient) EXPECT() *MockAdminDashboardClientMockRecorder {
	return m.recorder
}

// AddCoupon mocks base method.
func (m *MockAdminDashboardClient) AddCoupon(ctx context.Context, in *pb.AddCouponRequest, opts ...grpc.CallOption) (*pb.AddCouponResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCoupon", varargs...)
	ret0, _ := ret[0].(*pb.AddCouponResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCoupon indicates an expected call of AddCoupon.
func (mr *MockAdminDashboardClientMockRecorder) AddCoupon(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCoupon", reflect.TypeOf((*MockAdminDashboardClient)(nil).AddCoupon), varargs...)
}

// AddOffer mocks base method.
func (m *MockAdminDashboardClient) AddOffer(ctx context.Context, in *pb.AddOfferRequest, opts ...grpc.CallOption) (*pb.AddOfferResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddOffer", varargs...)
	ret0, _ := ret[0].(*pb.AddOfferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOffer indicates an expected call of AddOffer.
func (mr *MockAdminDashboardClientMockRecorder) AddOffer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOffer", reflect.TypeOf((*MockAdminDashboardClient)(nil).AddOffer), varargs...)
}

// CreateApparel mocks base method.
func (m *MockAdminDashboardClient) CreateApparel(ctx context.Context, in *pb.CreateApparelRequest, opts ...grpc.CallOption) (*pb.CreateApparelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApparel", varargs...)
	ret0, _ := ret[0].(*pb.CreateApparelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApparel indicates an expected call of CreateApparel.
func (mr *MockAdminDashboardClientMockRecorder) CreateApparel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApparel", reflect.TypeOf((*MockAdminDashboardClient)(nil).CreateApparel), varargs...)
}

// DeleteApparel mocks base method.
func (m *MockAdminDashboardClient) DeleteApparel(ctx context.Context, in *pb.DeleteApparelRequest, opts ...grpc.CallOption) (*pb.DeleteApparelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApparel", varargs...)
	ret0, _ := ret[0].(*pb.DeleteApparelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApparel indicates an expected call of DeleteApparel.
func (mr *MockAdminDashboardClientMockRecorder) DeleteApparel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApparel", reflect.TypeOf((*MockAdminDashboardClient)(nil).DeleteApparel), varargs...)
}

// EditApparel mocks base method.
func (m *MockAdminDashboardClient) EditApparel(ctx context.Context, in *pb.EditApparelResquest, opts ...grpc.CallOption) (*pb.EditApparelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditApparel", varargs...)
	ret0, _ := ret[0].(*pb.EditApparelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditApparel indicates an expected call of EditApparel.
func (mr *MockAdminDashboardClientMockRecorder) EditApparel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditApparel", reflect.TypeOf((*MockAdminDashboardClient)(nil).EditApparel), varargs...)
}

// MyMethod mocks base method.
func (m *MockAdminDashboardClient) MyMethod(ctx context.Context, in *pb.Request, opts ...grpc.CallOption) (*pb.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MyMethod", varargs...)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MyMethod indicates an expected call of MyMethod.
func (mr *MockAdminDashboardClientMockRecorder) MyMethod(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyMethod", reflect.TypeOf((*MockAdminDashboardClient)(nil).MyMethod), varargs...)
}

// SearchUserByid mocks base method.
func (m *MockAdminDashboardClient) SearchUserByid(ctx context.Context, in *pb.SearchUserByidRequest, opts ...grpc.CallOption) (*pb.SearchUserByidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchUserByid", varargs...)
	ret0, _ := ret[0].(*pb.SearchUserByidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserByid indicates an expected call of SearchUserByid.
func (mr *MockAdminDashboardClientMockRecorder) SearchUserByid(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserByid", reflect.TypeOf((*MockAdminDashboardClient)(nil).SearchUserByid), varargs...)
}

// SearchUserByname mocks base method.
func (m *MockAdminDashboardClient) SearchUserByname(ctx context.Context, in *pb.SearchUserBynameRequest, opts ...grpc.CallOption) (*pb.SearchUserBynameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchUserByname", varargs...)
	ret0, _ := ret[0].(*pb.SearchUserBynameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserByname indicates an expected call of SearchUserByname.
func (mr *MockAdminDashboardClientMockRecorder) SearchUserByname(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserByname", reflect.TypeOf((*MockAdminDashboardClient)(nil).SearchUserByname), varargs...)
}

// SortUserByPermission mocks base method.
func (m *MockAdminDashboardClient) SortUserByPermission(ctx context.Context, in *pb.SortUserRequest, opts ...grpc.CallOption) (*pb.SortUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SortUserByPermission", varargs...)
	ret0, _ := ret[0].(*pb.SortUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SortUserByPermission indicates an expected call of SortUserByPermission.
func (mr *MockAdminDashboardClientMockRecorder) SortUserByPermission(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortUserByPermission", reflect.TypeOf((*MockAdminDashboardClient)(nil).SortUserByPermission), varargs...)
}

// TogglePermission mocks base method.
func (m *MockAdminDashboardClient) TogglePermission(ctx context.Context, in *pb.TogglePermissionRequest, opts ...grpc.CallOption) (*pb.TogglePermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TogglePermission", varargs...)
	ret0, _ := ret[0].(*pb.TogglePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TogglePermission indicates an expected call of TogglePermission.
func (mr *MockAdminDashboardClientMockRecorder) TogglePermission(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TogglePermission", reflect.TypeOf((*MockAdminDashboardClient)(nil).TogglePermission), varargs...)
}

// UserList mocks base method.
func (m *MockAdminDashboardClient) UserList(ctx context.Context, in *pb.UserListRequest, opts ...grpc.CallOption) (*pb.UserListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserList", varargs...)
	ret0, _ := ret[0].(*pb.UserListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserList indicates an expected call of UserList.
func (mr *MockAdminDashboardClientMockRecorder) UserList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserList", reflect.TypeOf((*MockAdminDashboardClient)(nil).UserList), varargs...)
}

// MockAdminDashboardServer is a mock of AdminDashboardServer interface.
type MockAdminDashboardServer struct {
	ctrl     *gomock.Controller
	recorder *MockAdminDashboardServerMockRecorder
}

// MockAdminDashboardServerMockRecorder is the mock recorder for MockAdminDashboardServer.
type MockAdminDashboardServerMockRecorder struct {
	mock *MockAdminDashboardServer
}

// NewMockAdminDashboardServer creates a new mock instance.
func NewMockAdminDashboardServer(ctrl *gomock.Controller) *MockAdminDashboardServer {
	mock := &MockAdminDashboardServer{ctrl: ctrl}
	mock.recorder = &MockAdminDashboardServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminDashboardServer) EXPECT() *MockAdminDashboardServerMockRecorder {
	return m.recorder
}

// AddCoupon mocks base method.
func (m *MockAdminDashboardServer) AddCoupon(arg0 context.Context, arg1 *pb.AddCouponRequest) (*pb.AddCouponResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCoupon", arg0, arg1)
	ret0, _ := ret[0].(*pb.AddCouponResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCoupon indicates an expected call of AddCoupon.
func (mr *MockAdminDashboardServerMockRecorder) AddCoupon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCoupon", reflect.TypeOf((*MockAdminDashboardServer)(nil).AddCoupon), arg0, arg1)
}

// AddOffer mocks base method.
func (m *MockAdminDashboardServer) AddOffer(arg0 context.Context, arg1 *pb.AddOfferRequest) (*pb.AddOfferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOffer", arg0, arg1)
	ret0, _ := ret[0].(*pb.AddOfferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOffer indicates an expected call of AddOffer.
func (mr *MockAdminDashboardServerMockRecorder) AddOffer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOffer", reflect.TypeOf((*MockAdminDashboardServer)(nil).AddOffer), arg0, arg1)
}

// CreateApparel mocks base method.
func (m *MockAdminDashboardServer) CreateApparel(arg0 context.Context, arg1 *pb.CreateApparelRequest) (*pb.CreateApparelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApparel", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateApparelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApparel indicates an expected call of CreateApparel.
func (mr *MockAdminDashboardServerMockRecorder) CreateApparel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApparel", reflect.TypeOf((*MockAdminDashboardServer)(nil).CreateApparel), arg0, arg1)
}

// DeleteApparel mocks base method.
func (m *MockAdminDashboardServer) DeleteApparel(arg0 context.Context, arg1 *pb.DeleteApparelRequest) (*pb.DeleteApparelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApparel", arg0, arg1)
	ret0, _ := ret[0].(*pb.DeleteApparelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApparel indicates an expected call of DeleteApparel.
func (mr *MockAdminDashboardServerMockRecorder) DeleteApparel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApparel", reflect.TypeOf((*MockAdminDashboardServer)(nil).DeleteApparel), arg0, arg1)
}

// EditApparel mocks base method.
func (m *MockAdminDashboardServer) EditApparel(arg0 context.Context, arg1 *pb.EditApparelResquest) (*pb.EditApparelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditApparel", arg0, arg1)
	ret0, _ := ret[0].(*pb.EditApparelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditApparel indicates an expected call of EditApparel.
func (mr *MockAdminDashboardServerMockRecorder) EditApparel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditApparel", reflect.TypeOf((*MockAdminDashboardServer)(nil).EditApparel), arg0, arg1)
}

// MyMethod mocks base method.
func (m *MockAdminDashboardServer) MyMethod(arg0 context.Context, arg1 *pb.Request) (*pb.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyMethod", arg0, arg1)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MyMethod indicates an expected call of MyMethod.
func (mr *MockAdminDashboardServerMockRecorder) MyMethod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyMethod", reflect.TypeOf((*MockAdminDashboardServer)(nil).MyMethod), arg0, arg1)
}

// SearchUserByid mocks base method.
func (m *MockAdminDashboardServer) SearchUserByid(arg0 context.Context, arg1 *pb.SearchUserByidRequest) (*pb.SearchUserByidResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserByid", arg0, arg1)
	ret0, _ := ret[0].(*pb.SearchUserByidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserByid indicates an expected call of SearchUserByid.
func (mr *MockAdminDashboardServerMockRecorder) SearchUserByid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserByid", reflect.TypeOf((*MockAdminDashboardServer)(nil).SearchUserByid), arg0, arg1)
}

// SearchUserByname mocks base method.
func (m *MockAdminDashboardServer) SearchUserByname(arg0 context.Context, arg1 *pb.SearchUserBynameRequest) (*pb.SearchUserBynameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserByname", arg0, arg1)
	ret0, _ := ret[0].(*pb.SearchUserBynameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserByname indicates an expected call of SearchUserByname.
func (mr *MockAdminDashboardServerMockRecorder) SearchUserByname(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserByname", reflect.TypeOf((*MockAdminDashboardServer)(nil).SearchUserByname), arg0, arg1)
}

// SortUserByPermission mocks base method.
func (m *MockAdminDashboardServer) SortUserByPermission(arg0 context.Context, arg1 *pb.SortUserRequest) (*pb.SortUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortUserByPermission", arg0, arg1)
	ret0, _ := ret[0].(*pb.SortUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SortUserByPermission indicates an expected call of SortUserByPermission.
func (mr *MockAdminDashboardServerMockRecorder) SortUserByPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortUserByPermission", reflect.TypeOf((*MockAdminDashboardServer)(nil).SortUserByPermission), arg0, arg1)
}

// TogglePermission mocks base method.
func (m *MockAdminDashboardServer) TogglePermission(arg0 context.Context, arg1 *pb.TogglePermissionRequest) (*pb.TogglePermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TogglePermission", arg0, arg1)
	ret0, _ := ret[0].(*pb.TogglePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TogglePermission indicates an expected call of TogglePermission.
func (mr *MockAdminDashboardServerMockRecorder) TogglePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TogglePermission", reflect.TypeOf((*MockAdminDashboardServer)(nil).TogglePermission), arg0, arg1)
}

// UserList mocks base method.
func (m *MockAdminDashboardServer) UserList(arg0 context.Context, arg1 *pb.UserListRequest) (*pb.UserListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserList", arg0, arg1)
	ret0, _ := ret[0].(*pb.UserListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserList indicates an expected call of UserList.
func (mr *MockAdminDashboardServerMockRecorder) UserList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserList", reflect.TypeOf((*MockAdminDashboardServer)(nil).UserList), arg0, arg1)
}

// mustEmbedUnimplementedAdminDashboardServer mocks base method.
func (m *MockAdminDashboardServer) mustEmbedUnimplementedAdminDashboardServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAdminDashboardServer")
}

// mustEmbedUnimplementedAdminDashboardServer indicates an expected call of mustEmbedUnimplementedAdminDashboardServer.
func (mr *MockAdminDashboardServerMockRecorder) mustEmbedUnimplementedAdminDashboardServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAdminDashboardServer", reflect.TypeOf((*MockAdminDashboardServer)(nil).mustEmbedUnimplementedAdminDashboardServer))
}

// MockUnsafeAdminDashboardServer is a mock of UnsafeAdminDashboardServer interface.
type MockUnsafeAdminDashboardServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAdminDashboardServerMockRecorder
}

// MockUnsafeAdminDashboardServerMockRecorder is the mock recorder for MockUnsafeAdminDashboardServer.
type MockUnsafeAdminDashboardServerMockRecorder struct {
	mock *MockUnsafeAdminDashboardServer
}

// NewMockUnsafeAdminDashboardServer creates a new mock instance.
func NewMockUnsafeAdminDashboardServer(ctrl *gomock.Controller) *MockUnsafeAdminDashboardServer {
	mock := &MockUnsafeAdminDashboardServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAdminDashboardServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAdminDashboardServer) EXPECT() *MockUnsafeAdminDashboardServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAdminDashboardServer mocks base method.
func (m *MockUnsafeAdminDashboardServer) mustEmbedUnimplementedAdminDashboardServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAdminDashboardServer")
}

// mustEmbedUnimplementedAdminDashboardServer indicates an expected call of mustEmbedUnimplementedAdminDashboardServer.
func (mr *MockUnsafeAdminDashboardServerMockRecorder) mustEmbedUnimplementedAdminDashboardServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAdminDashboardServer", reflect.TypeOf((*MockUnsafeAdminDashboardServer)(nil).mustEmbedUnimplementedAdminDashboardServer))
}

// MockUserDashboardClient is a mock of UserDashboardClient interface.
type MockUserDashboardClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserDashboardClientMockRecorder
}

// MockUserDashboardClientMockRecorder is the mock recorder for MockUserDashboardClient.
type MockUserDashboardClientMockRecorder struct {
	mock *MockUserDashboardClient
}

// NewMockUserDashboardClient creates a new mock instance.
func NewMockUserDashboardClient(ctrl *gomock.Controller) *MockUserDashboardClient {
	mock := &MockUserDashboardClient{ctrl: ctrl}
	mock.recorder = &MockUserDashboardClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDashboardClient) EXPECT() *MockUserDashboardClientMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserDashboardClient) AddAddress(ctx context.Context, in *pb.AddAddressRequest, opts ...grpc.CallOption) (*pb.AddAddressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAddress", varargs...)
	ret0, _ := ret[0].(*pb.AddAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserDashboardClientMockRecorder) AddAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserDashboardClient)(nil).AddAddress), varargs...)
}

// AddToCart mocks base method.
func (m *MockUserDashboardClient) AddToCart(ctx context.Context, in *pb.AddToCartRequest, opts ...grpc.CallOption) (*pb.AddToCartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddToCart", varargs...)
	ret0, _ := ret[0].(*pb.AddToCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockUserDashboardClientMockRecorder) AddToCart(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockUserDashboardClient)(nil).AddToCart), varargs...)
}

// AddToWishList mocks base method.
func (m *MockUserDashboardClient) AddToWishList(ctx context.Context, in *pb.AddToWishListRequest, opts ...grpc.CallOption) (*pb.AddToWishListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddToWishList", varargs...)
	ret0, _ := ret[0].(*pb.AddToWishListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToWishList indicates an expected call of AddToWishList.
func (mr *MockUserDashboardClientMockRecorder) AddToWishList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToWishList", reflect.TypeOf((*MockUserDashboardClient)(nil).AddToWishList), varargs...)
}

// ApparelDetails mocks base method.
func (m *MockUserDashboardClient) ApparelDetails(ctx context.Context, in *pb.ApparelDetailsRequest, opts ...grpc.CallOption) (*pb.ApparelDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApparelDetails", varargs...)
	ret0, _ := ret[0].(*pb.ApparelDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApparelDetails indicates an expected call of ApparelDetails.
func (mr *MockUserDashboardClientMockRecorder) ApparelDetails(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApparelDetails", reflect.TypeOf((*MockUserDashboardClient)(nil).ApparelDetails), varargs...)
}

// Apparels mocks base method.
func (m *MockUserDashboardClient) Apparels(ctx context.Context, in *pb.ApparelsRequest, opts ...grpc.CallOption) (*pb.ApparelsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Apparels", varargs...)
	ret0, _ := ret[0].(*pb.ApparelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apparels indicates an expected call of Apparels.
func (mr *MockUserDashboardClientMockRecorder) Apparels(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apparels", reflect.TypeOf((*MockUserDashboardClient)(nil).Apparels), varargs...)
}

// ApplyCoupon mocks base method.
func (m *MockUserDashboardClient) ApplyCoupon(ctx context.Context, in *pb.ApplyCouponRequest, opts ...grpc.CallOption) (*pb.ApplyCouponResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplyCoupon", varargs...)
	ret0, _ := ret[0].(*pb.ApplyCouponResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyCoupon indicates an expected call of ApplyCoupon.
func (mr *MockUserDashboardClientMockRecorder) ApplyCoupon(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyCoupon", reflect.TypeOf((*MockUserDashboardClient)(nil).ApplyCoupon), varargs...)
}

// AvailableCoupons mocks base method.
func (m *MockUserDashboardClient) AvailableCoupons(ctx context.Context, in *pb.AvailableCouponsRequest, opts ...grpc.CallOption) (*pb.AvailableCouponsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AvailableCoupons", varargs...)
	ret0, _ := ret[0].(*pb.AvailableCouponsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailableCoupons indicates an expected call of AvailableCoupons.
func (mr *MockUserDashboardClientMockRecorder) AvailableCoupons(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableCoupons", reflect.TypeOf((*MockUserDashboardClient)(nil).AvailableCoupons), varargs...)
}

// Cart mocks base method.
func (m *MockUserDashboardClient) Cart(ctx context.Context, in *pb.CartRequest, opts ...grpc.CallOption) (*pb.CartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Cart", varargs...)
	ret0, _ := ret[0].(*pb.CartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cart indicates an expected call of Cart.
func (mr *MockUserDashboardClientMockRecorder) Cart(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cart", reflect.TypeOf((*MockUserDashboardClient)(nil).Cart), varargs...)
}

// CartList mocks base method.
func (m *MockUserDashboardClient) CartList(ctx context.Context, in *pb.CartListRequest, opts ...grpc.CallOption) (*pb.CartListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CartList", varargs...)
	ret0, _ := ret[0].(*pb.CartListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CartList indicates an expected call of CartList.
func (mr *MockUserDashboardClientMockRecorder) CartList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CartList", reflect.TypeOf((*MockUserDashboardClient)(nil).CartList), varargs...)
}

// Home mocks base method.
func (m *MockUserDashboardClient) Home(ctx context.Context, in *pb.HomeRequest, opts ...grpc.CallOption) (*pb.HomeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Home", varargs...)
	ret0, _ := ret[0].(*pb.HomeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Home indicates an expected call of Home.
func (mr *MockUserDashboardClientMockRecorder) Home(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Home", reflect.TypeOf((*MockUserDashboardClient)(nil).Home), varargs...)
}

// MyMethod mocks base method.
func (m *MockUserDashboardClient) MyMethod(ctx context.Context, in *pb.Request, opts ...grpc.CallOption) (*pb.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MyMethod", varargs...)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MyMethod indicates an expected call of MyMethod.
func (mr *MockUserDashboardClientMockRecorder) MyMethod(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyMethod", reflect.TypeOf((*MockUserDashboardClient)(nil).MyMethod), varargs...)
}

// OfferCheck mocks base method.
func (m *MockUserDashboardClient) OfferCheck(ctx context.Context, in *pb.OfferCheckRequest, opts ...grpc.CallOption) (*pb.OfferCheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OfferCheck", varargs...)
	ret0, _ := ret[0].(*pb.OfferCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfferCheck indicates an expected call of OfferCheck.
func (mr *MockUserDashboardClientMockRecorder) OfferCheck(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferCheck", reflect.TypeOf((*MockUserDashboardClient)(nil).OfferCheck), varargs...)
}

// RemoveFromCart mocks base method.
func (m *MockUserDashboardClient) RemoveFromCart(ctx context.Context, in *pb.RemoveFromCartRequest, opts ...grpc.CallOption) (*pb.RemoveFromCartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFromCart", varargs...)
	ret0, _ := ret[0].(*pb.RemoveFromCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFromCart indicates an expected call of RemoveFromCart.
func (mr *MockUserDashboardClientMockRecorder) RemoveFromCart(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCart", reflect.TypeOf((*MockUserDashboardClient)(nil).RemoveFromCart), varargs...)
}

// RemoveFromWishlist mocks base method.
func (m *MockUserDashboardClient) RemoveFromWishlist(ctx context.Context, in *pb.RemoveFromWishlistRequest, opts ...grpc.CallOption) (*pb.RemoveFromWishlistResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFromWishlist", varargs...)
	ret0, _ := ret[0].(*pb.RemoveFromWishlistResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFromWishlist indicates an expected call of RemoveFromWishlist.
func (mr *MockUserDashboardClientMockRecorder) RemoveFromWishlist(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromWishlist", reflect.TypeOf((*MockUserDashboardClient)(nil).RemoveFromWishlist), varargs...)
}

// SearchApparels mocks base method.
func (m *MockUserDashboardClient) SearchApparels(ctx context.Context, in *pb.SearchApparelsRequest, opts ...grpc.CallOption) (*pb.SearchApparelsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchApparels", varargs...)
	ret0, _ := ret[0].(*pb.SearchApparelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchApparels indicates an expected call of SearchApparels.
func (mr *MockUserDashboardClientMockRecorder) SearchApparels(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchApparels", reflect.TypeOf((*MockUserDashboardClient)(nil).SearchApparels), varargs...)
}

// UserDetails mocks base method.
func (m *MockUserDashboardClient) UserDetails(ctx context.Context, in *pb.UserDetailsRequset, opts ...grpc.CallOption) (*pb.UserDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserDetails", varargs...)
	ret0, _ := ret[0].(*pb.UserDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDetails indicates an expected call of UserDetails.
func (mr *MockUserDashboardClientMockRecorder) UserDetails(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDetails", reflect.TypeOf((*MockUserDashboardClient)(nil).UserDetails), varargs...)
}

// Wishlist mocks base method.
func (m *MockUserDashboardClient) Wishlist(ctx context.Context, in *pb.WishlistRequest, opts ...grpc.CallOption) (*pb.WishlistResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Wishlist", varargs...)
	ret0, _ := ret[0].(*pb.WishlistResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wishlist indicates an expected call of Wishlist.
func (mr *MockUserDashboardClientMockRecorder) Wishlist(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wishlist", reflect.TypeOf((*MockUserDashboardClient)(nil).Wishlist), varargs...)
}

// MockUserDashboardServer is a mock of UserDashboardServer interface.
type MockUserDashboardServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserDashboardServerMockRecorder
}

// MockUserDashboardServerMockRecorder is the mock recorder for MockUserDashboardServer.
type MockUserDashboardServerMockRecorder struct {
	mock *MockUserDashboardServer
}

// NewMockUserDashboardServer creates a new mock instance.
func NewMockUserDashboardServer(ctrl *gomock.Controller) *MockUserDashboardServer {
	mock := &MockUserDashboardServer{ctrl: ctrl}
	mock.recorder = &MockUserDashboardServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDashboardServer) EXPECT() *MockUserDashboardServerMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserDashboardServer) AddAddress(arg0 context.Context, arg1 *pb.AddAddressRequest) (*pb.AddAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", arg0, arg1)
	ret0, _ := ret[0].(*pb.AddAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserDashboardServerMockRecorder) AddAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserDashboardServer)(nil).AddAddress), arg0, arg1)
}

// AddToCart mocks base method.
func (m *MockUserDashboardServer) AddToCart(arg0 context.Context, arg1 *pb.AddToCartRequest) (*pb.AddToCartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", arg0, arg1)
	ret0, _ := ret[0].(*pb.AddToCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockUserDashboardServerMockRecorder) AddToCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockUserDashboardServer)(nil).AddToCart), arg0, arg1)
}

// AddToWishList mocks base method.
func (m *MockUserDashboardServer) AddToWishList(arg0 context.Context, arg1 *pb.AddToWishListRequest) (*pb.AddToWishListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToWishList", arg0, arg1)
	ret0, _ := ret[0].(*pb.AddToWishListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToWishList indicates an expected call of AddToWishList.
func (mr *MockUserDashboardServerMockRecorder) AddToWishList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToWishList", reflect.TypeOf((*MockUserDashboardServer)(nil).AddToWishList), arg0, arg1)
}

// ApparelDetails mocks base method.
func (m *MockUserDashboardServer) ApparelDetails(arg0 context.Context, arg1 *pb.ApparelDetailsRequest) (*pb.ApparelDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApparelDetails", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApparelDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApparelDetails indicates an expected call of ApparelDetails.
func (mr *MockUserDashboardServerMockRecorder) ApparelDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApparelDetails", reflect.TypeOf((*MockUserDashboardServer)(nil).ApparelDetails), arg0, arg1)
}

// Apparels mocks base method.
func (m *MockUserDashboardServer) Apparels(arg0 context.Context, arg1 *pb.ApparelsRequest) (*pb.ApparelsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apparels", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApparelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apparels indicates an expected call of Apparels.
func (mr *MockUserDashboardServerMockRecorder) Apparels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apparels", reflect.TypeOf((*MockUserDashboardServer)(nil).Apparels), arg0, arg1)
}

// ApplyCoupon mocks base method.
func (m *MockUserDashboardServer) ApplyCoupon(arg0 context.Context, arg1 *pb.ApplyCouponRequest) (*pb.ApplyCouponResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyCoupon", arg0, arg1)
	ret0, _ := ret[0].(*pb.ApplyCouponResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyCoupon indicates an expected call of ApplyCoupon.
func (mr *MockUserDashboardServerMockRecorder) ApplyCoupon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyCoupon", reflect.TypeOf((*MockUserDashboardServer)(nil).ApplyCoupon), arg0, arg1)
}

// AvailableCoupons mocks base method.
func (m *MockUserDashboardServer) AvailableCoupons(arg0 context.Context, arg1 *pb.AvailableCouponsRequest) (*pb.AvailableCouponsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableCoupons", arg0, arg1)
	ret0, _ := ret[0].(*pb.AvailableCouponsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailableCoupons indicates an expected call of AvailableCoupons.
func (mr *MockUserDashboardServerMockRecorder) AvailableCoupons(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableCoupons", reflect.TypeOf((*MockUserDashboardServer)(nil).AvailableCoupons), arg0, arg1)
}

// Cart mocks base method.
func (m *MockUserDashboardServer) Cart(arg0 context.Context, arg1 *pb.CartRequest) (*pb.CartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cart", arg0, arg1)
	ret0, _ := ret[0].(*pb.CartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cart indicates an expected call of Cart.
func (mr *MockUserDashboardServerMockRecorder) Cart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cart", reflect.TypeOf((*MockUserDashboardServer)(nil).Cart), arg0, arg1)
}

// CartList mocks base method.
func (m *MockUserDashboardServer) CartList(arg0 context.Context, arg1 *pb.CartListRequest) (*pb.CartListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CartList", arg0, arg1)
	ret0, _ := ret[0].(*pb.CartListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CartList indicates an expected call of CartList.
func (mr *MockUserDashboardServerMockRecorder) CartList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CartList", reflect.TypeOf((*MockUserDashboardServer)(nil).CartList), arg0, arg1)
}

// Home mocks base method.
func (m *MockUserDashboardServer) Home(arg0 context.Context, arg1 *pb.HomeRequest) (*pb.HomeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Home", arg0, arg1)
	ret0, _ := ret[0].(*pb.HomeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Home indicates an expected call of Home.
func (mr *MockUserDashboardServerMockRecorder) Home(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Home", reflect.TypeOf((*MockUserDashboardServer)(nil).Home), arg0, arg1)
}

// MyMethod mocks base method.
func (m *MockUserDashboardServer) MyMethod(arg0 context.Context, arg1 *pb.Request) (*pb.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyMethod", arg0, arg1)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MyMethod indicates an expected call of MyMethod.
func (mr *MockUserDashboardServerMockRecorder) MyMethod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyMethod", reflect.TypeOf((*MockUserDashboardServer)(nil).MyMethod), arg0, arg1)
}

// OfferCheck mocks base method.
func (m *MockUserDashboardServer) OfferCheck(arg0 context.Context, arg1 *pb.OfferCheckRequest) (*pb.OfferCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferCheck", arg0, arg1)
	ret0, _ := ret[0].(*pb.OfferCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfferCheck indicates an expected call of OfferCheck.
func (mr *MockUserDashboardServerMockRecorder) OfferCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferCheck", reflect.TypeOf((*MockUserDashboardServer)(nil).OfferCheck), arg0, arg1)
}

// RemoveFromCart mocks base method.
func (m *MockUserDashboardServer) RemoveFromCart(arg0 context.Context, arg1 *pb.RemoveFromCartRequest) (*pb.RemoveFromCartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromCart", arg0, arg1)
	ret0, _ := ret[0].(*pb.RemoveFromCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFromCart indicates an expected call of RemoveFromCart.
func (mr *MockUserDashboardServerMockRecorder) RemoveFromCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCart", reflect.TypeOf((*MockUserDashboardServer)(nil).RemoveFromCart), arg0, arg1)
}

// RemoveFromWishlist mocks base method.
func (m *MockUserDashboardServer) RemoveFromWishlist(arg0 context.Context, arg1 *pb.RemoveFromWishlistRequest) (*pb.RemoveFromWishlistResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromWishlist", arg0, arg1)
	ret0, _ := ret[0].(*pb.RemoveFromWishlistResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFromWishlist indicates an expected call of RemoveFromWishlist.
func (mr *MockUserDashboardServerMockRecorder) RemoveFromWishlist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromWishlist", reflect.TypeOf((*MockUserDashboardServer)(nil).RemoveFromWishlist), arg0, arg1)
}

// SearchApparels mocks base method.
func (m *MockUserDashboardServer) SearchApparels(arg0 context.Context, arg1 *pb.SearchApparelsRequest) (*pb.SearchApparelsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchApparels", arg0, arg1)
	ret0, _ := ret[0].(*pb.SearchApparelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchApparels indicates an expected call of SearchApparels.
func (mr *MockUserDashboardServerMockRecorder) SearchApparels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchApparels", reflect.TypeOf((*MockUserDashboardServer)(nil).SearchApparels), arg0, arg1)
}

// UserDetails mocks base method.
func (m *MockUserDashboardServer) UserDetails(arg0 context.Context, arg1 *pb.UserDetailsRequset) (*pb.UserDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDetails", arg0, arg1)
	ret0, _ := ret[0].(*pb.UserDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDetails indicates an expected call of UserDetails.
func (mr *MockUserDashboardServerMockRecorder) UserDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDetails", reflect.TypeOf((*MockUserDashboardServer)(nil).UserDetails), arg0, arg1)
}

// Wishlist mocks base method.
func (m *MockUserDashboardServer) Wishlist(arg0 context.Context, arg1 *pb.WishlistRequest) (*pb.WishlistResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wishlist", arg0, arg1)
	ret0, _ := ret[0].(*pb.WishlistResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wishlist indicates an expected call of Wishlist.
func (mr *MockUserDashboardServerMockRecorder) Wishlist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wishlist", reflect.TypeOf((*MockUserDashboardServer)(nil).Wishlist), arg0, arg1)
}

// mustEmbedUnimplementedUserDashboardServer mocks base method.
func (m *MockUserDashboardServer) mustEmbedUnimplementedUserDashboardServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserDashboardServer")
}

// mustEmbedUnimplementedUserDashboardServer indicates an expected call of mustEmbedUnimplementedUserDashboardServer.
func (mr *MockUserDashboardServerMockRecorder) mustEmbedUnimplementedUserDashboardServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserDashboardServer", reflect.TypeOf((*MockUserDashboardServer)(nil).mustEmbedUnimplementedUserDashboardServer))
}

// MockUnsafeUserDashboardServer is a mock of UnsafeUserDashboardServer interface.
type MockUnsafeUserDashboardServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserDashboardServerMockRecorder
}

// MockUnsafeUserDashboardServerMockRecorder is the mock recorder for MockUnsafeUserDashboardServer.
type MockUnsafeUserDashboardServerMockRecorder struct {
	mock *MockUnsafeUserDashboardServer
}

// NewMockUnsafeUserDashboardServer creates a new mock instance.
func NewMockUnsafeUserDashboardServer(ctrl *gomock.Controller) *MockUnsafeUserDashboardServer {
	mock := &MockUnsafeUserDashboardServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserDashboardServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserDashboardServer) EXPECT() *MockUnsafeUserDashboardServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserDashboardServer mocks base method.
func (m *MockUnsafeUserDashboardServer) mustEmbedUnimplementedUserDashboardServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserDashboardServer")
}

// mustEmbedUnimplementedUserDashboardServer indicates an expected call of mustEmbedUnimplementedUserDashboardServer.
func (mr *MockUnsafeUserDashboardServerMockRecorder) mustEmbedUnimplementedUserDashboardServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserDashboardServer", reflect.TypeOf((*MockUnsafeUserDashboardServer)(nil).mustEmbedUnimplementedUserDashboardServer))
}

// MockOrderClient is a mock of OrderClient interface.
type MockOrderClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrderClientMockRecorder
}

// MockOrderClientMockRecorder is the mock recorder for MockOrderClient.
type MockOrderClientMockRecorder struct {
	mock *MockOrderClient
}

// NewMockOrderClient creates a new mock instance.
func NewMockOrderClient(ctrl *gomock.Controller) *MockOrderClient {
	mock := &MockOrderClient{ctrl: ctrl}
	mock.recorder = &MockOrderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderClient) EXPECT() *MockOrderClientMockRecorder {
	return m.recorder
}

// AdminOrderUpdate mocks base method.
func (m *MockOrderClient) AdminOrderUpdate(ctx context.Context, in *pb.AdminOrderUpdateRequest, opts ...grpc.CallOption) (*pb.AdminOrderUpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminOrderUpdate", varargs...)
	ret0, _ := ret[0].(*pb.AdminOrderUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminOrderUpdate indicates an expected call of AdminOrderUpdate.
func (mr *MockOrderClientMockRecorder) AdminOrderUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminOrderUpdate", reflect.TypeOf((*MockOrderClient)(nil).AdminOrderUpdate), varargs...)
}

// AdminRefund mocks base method.
func (m *MockOrderClient) AdminRefund(ctx context.Context, in *pb.AdminRefundRequest, opts ...grpc.CallOption) (*pb.AdminRefundResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminRefund", varargs...)
	ret0, _ := ret[0].(*pb.AdminRefundResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminRefund indicates an expected call of AdminRefund.
func (mr *MockOrderClientMockRecorder) AdminRefund(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminRefund", reflect.TypeOf((*MockOrderClient)(nil).AdminRefund), varargs...)
}

// AdminReturnUpdate mocks base method.
func (m *MockOrderClient) AdminReturnUpdate(ctx context.Context, in *pb.AdminReturnUpdateRequest, opts ...grpc.CallOption) (*pb.AdminReturnUpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminReturnUpdate", varargs...)
	ret0, _ := ret[0].(*pb.AdminReturnUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminReturnUpdate indicates an expected call of AdminReturnUpdate.
func (mr *MockOrderClientMockRecorder) AdminReturnUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminReturnUpdate", reflect.TypeOf((*MockOrderClient)(nil).AdminReturnUpdate), varargs...)
}

// CancelOrder mocks base method.
func (m *MockOrderClient) CancelOrder(ctx context.Context, in *pb.CancelOrderRequest, opts ...grpc.CallOption) (*pb.CancelOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelOrder", varargs...)
	ret0, _ := ret[0].(*pb.CancelOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrderClientMockRecorder) CancelOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrderClient)(nil).CancelOrder), varargs...)
}

// MyMethod mocks base method.
func (m *MockOrderClient) MyMethod(ctx context.Context, in *pb.Request, opts ...grpc.CallOption) (*pb.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MyMethod", varargs...)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MyMethod indicates an expected call of MyMethod.
func (mr *MockOrderClientMockRecorder) MyMethod(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyMethod", reflect.TypeOf((*MockOrderClient)(nil).MyMethod), varargs...)
}

// OrderHistory mocks base method.
func (m *MockOrderClient) OrderHistory(ctx context.Context, in *pb.OrderHistoryRequest, opts ...grpc.CallOption) (*pb.OrderHistoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderHistory", varargs...)
	ret0, _ := ret[0].(*pb.OrderHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderHistory indicates an expected call of OrderHistory.
func (mr *MockOrderClientMockRecorder) OrderHistory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderHistory", reflect.TypeOf((*MockOrderClient)(nil).OrderHistory), varargs...)
}

// OrderReturn mocks base method.
func (m *MockOrderClient) OrderReturn(ctx context.Context, in *pb.OrderReturnRequest, opts ...grpc.CallOption) (*pb.OrderReturnResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderReturn", varargs...)
	ret0, _ := ret[0].(*pb.OrderReturnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderReturn indicates an expected call of OrderReturn.
func (mr *MockOrderClientMockRecorder) OrderReturn(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderReturn", reflect.TypeOf((*MockOrderClient)(nil).OrderReturn), varargs...)
}

// PaymentVerification mocks base method.
func (m *MockOrderClient) PaymentVerification(ctx context.Context, in *pb.PaymentVerificationRequest, opts ...grpc.CallOption) (*pb.PaymentVerificationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PaymentVerification", varargs...)
	ret0, _ := ret[0].(*pb.PaymentVerificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentVerification indicates an expected call of PaymentVerification.
func (mr *MockOrderClientMockRecorder) PaymentVerification(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentVerification", reflect.TypeOf((*MockOrderClient)(nil).PaymentVerification), varargs...)
}

// PlaceOrder mocks base method.
func (m *MockOrderClient) PlaceOrder(ctx context.Context, in *pb.PlaceOrderRequest, opts ...grpc.CallOption) (*pb.PlaceOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PlaceOrder", varargs...)
	ret0, _ := ret[0].(*pb.PlaceOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceOrder indicates an expected call of PlaceOrder.
func (mr *MockOrderClientMockRecorder) PlaceOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceOrder", reflect.TypeOf((*MockOrderClient)(nil).PlaceOrder), varargs...)
}

// SalesReportByCategory mocks base method.
func (m *MockOrderClient) SalesReportByCategory(ctx context.Context, in *pb.SalesReportByCategoryRequest, opts ...grpc.CallOption) (*pb.SalesReportByCategoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SalesReportByCategory", varargs...)
	ret0, _ := ret[0].(*pb.SalesReportByCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SalesReportByCategory indicates an expected call of SalesReportByCategory.
func (mr *MockOrderClientMockRecorder) SalesReportByCategory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SalesReportByCategory", reflect.TypeOf((*MockOrderClient)(nil).SalesReportByCategory), varargs...)
}

// SalesReportByDate mocks base method.
func (m *MockOrderClient) SalesReportByDate(ctx context.Context, in *pb.SalesReportByDateRequest, opts ...grpc.CallOption) (*pb.SalesReportByDateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SalesReportByDate", varargs...)
	ret0, _ := ret[0].(*pb.SalesReportByDateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SalesReportByDate indicates an expected call of SalesReportByDate.
func (mr *MockOrderClientMockRecorder) SalesReportByDate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SalesReportByDate", reflect.TypeOf((*MockOrderClient)(nil).SalesReportByDate), varargs...)
}

// SalesReportByPeriod mocks base method.
func (m *MockOrderClient) SalesReportByPeriod(ctx context.Context, in *pb.SalesReportByPeriodRequest, opts ...grpc.CallOption) (*pb.SalesReportByPeriodResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SalesReportByPeriod", varargs...)
	ret0, _ := ret[0].(*pb.SalesReportByPeriodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SalesReportByPeriod indicates an expected call of SalesReportByPeriod.
func (mr *MockOrderClientMockRecorder) SalesReportByPeriod(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SalesReportByPeriod", reflect.TypeOf((*MockOrderClient)(nil).SalesReportByPeriod), varargs...)
}

// SortOrderByStatus mocks base method.
func (m *MockOrderClient) SortOrderByStatus(ctx context.Context, in *pb.SortOrderByStatusRequest, opts ...grpc.CallOption) (*pb.SortOrderByStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SortOrderByStatus", varargs...)
	ret0, _ := ret[0].(*pb.SortOrderByStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SortOrderByStatus indicates an expected call of SortOrderByStatus.
func (mr *MockOrderClientMockRecorder) SortOrderByStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortOrderByStatus", reflect.TypeOf((*MockOrderClient)(nil).SortOrderByStatus), varargs...)
}

// MockOrderServer is a mock of OrderServer interface.
type MockOrderServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServerMockRecorder
}

// MockOrderServerMockRecorder is the mock recorder for MockOrderServer.
type MockOrderServerMockRecorder struct {
	mock *MockOrderServer
}

// NewMockOrderServer creates a new mock instance.
func NewMockOrderServer(ctrl *gomock.Controller) *MockOrderServer {
	mock := &MockOrderServer{ctrl: ctrl}
	mock.recorder = &MockOrderServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServer) EXPECT() *MockOrderServerMockRecorder {
	return m.recorder
}

// AdminOrderUpdate mocks base method.
func (m *MockOrderServer) AdminOrderUpdate(arg0 context.Context, arg1 *pb.AdminOrderUpdateRequest) (*pb.AdminOrderUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminOrderUpdate", arg0, arg1)
	ret0, _ := ret[0].(*pb.AdminOrderUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminOrderUpdate indicates an expected call of AdminOrderUpdate.
func (mr *MockOrderServerMockRecorder) AdminOrderUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminOrderUpdate", reflect.TypeOf((*MockOrderServer)(nil).AdminOrderUpdate), arg0, arg1)
}

// AdminRefund mocks base method.
func (m *MockOrderServer) AdminRefund(arg0 context.Context, arg1 *pb.AdminRefundRequest) (*pb.AdminRefundResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminRefund", arg0, arg1)
	ret0, _ := ret[0].(*pb.AdminRefundResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminRefund indicates an expected call of AdminRefund.
func (mr *MockOrderServerMockRecorder) AdminRefund(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminRefund", reflect.TypeOf((*MockOrderServer)(nil).AdminRefund), arg0, arg1)
}

// AdminReturnUpdate mocks base method.
func (m *MockOrderServer) AdminReturnUpdate(arg0 context.Context, arg1 *pb.AdminReturnUpdateRequest) (*pb.AdminReturnUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminReturnUpdate", arg0, arg1)
	ret0, _ := ret[0].(*pb.AdminReturnUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminReturnUpdate indicates an expected call of AdminReturnUpdate.
func (mr *MockOrderServerMockRecorder) AdminReturnUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminReturnUpdate", reflect.TypeOf((*MockOrderServer)(nil).AdminReturnUpdate), arg0, arg1)
}

// CancelOrder mocks base method.
func (m *MockOrderServer) CancelOrder(arg0 context.Context, arg1 *pb.CancelOrderRequest) (*pb.CancelOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", arg0, arg1)
	ret0, _ := ret[0].(*pb.CancelOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrderServerMockRecorder) CancelOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrderServer)(nil).CancelOrder), arg0, arg1)
}

// MyMethod mocks base method.
func (m *MockOrderServer) MyMethod(arg0 context.Context, arg1 *pb.Request) (*pb.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyMethod", arg0, arg1)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MyMethod indicates an expected call of MyMethod.
func (mr *MockOrderServerMockRecorder) MyMethod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyMethod", reflect.TypeOf((*MockOrderServer)(nil).MyMethod), arg0, arg1)
}

// OrderHistory mocks base method.
func (m *MockOrderServer) OrderHistory(arg0 context.Context, arg1 *pb.OrderHistoryRequest) (*pb.OrderHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderHistory", arg0, arg1)
	ret0, _ := ret[0].(*pb.OrderHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderHistory indicates an expected call of OrderHistory.
func (mr *MockOrderServerMockRecorder) OrderHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderHistory", reflect.TypeOf((*MockOrderServer)(nil).OrderHistory), arg0, arg1)
}

// OrderReturn mocks base method.
func (m *MockOrderServer) OrderReturn(arg0 context.Context, arg1 *pb.OrderReturnRequest) (*pb.OrderReturnResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderReturn", arg0, arg1)
	ret0, _ := ret[0].(*pb.OrderReturnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderReturn indicates an expected call of OrderReturn.
func (mr *MockOrderServerMockRecorder) OrderReturn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderReturn", reflect.TypeOf((*MockOrderServer)(nil).OrderReturn), arg0, arg1)
}

// PaymentVerification mocks base method.
func (m *MockOrderServer) PaymentVerification(arg0 context.Context, arg1 *pb.PaymentVerificationRequest) (*pb.PaymentVerificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentVerification", arg0, arg1)
	ret0, _ := ret[0].(*pb.PaymentVerificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentVerification indicates an expected call of PaymentVerification.
func (mr *MockOrderServerMockRecorder) PaymentVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentVerification", reflect.TypeOf((*MockOrderServer)(nil).PaymentVerification), arg0, arg1)
}

// PlaceOrder mocks base method.
func (m *MockOrderServer) PlaceOrder(arg0 context.Context, arg1 *pb.PlaceOrderRequest) (*pb.PlaceOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceOrder", arg0, arg1)
	ret0, _ := ret[0].(*pb.PlaceOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceOrder indicates an expected call of PlaceOrder.
func (mr *MockOrderServerMockRecorder) PlaceOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceOrder", reflect.TypeOf((*MockOrderServer)(nil).PlaceOrder), arg0, arg1)
}

// SalesReportByCategory mocks base method.
func (m *MockOrderServer) SalesReportByCategory(arg0 context.Context, arg1 *pb.SalesReportByCategoryRequest) (*pb.SalesReportByCategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SalesReportByCategory", arg0, arg1)
	ret0, _ := ret[0].(*pb.SalesReportByCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SalesReportByCategory indicates an expected call of SalesReportByCategory.
func (mr *MockOrderServerMockRecorder) SalesReportByCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SalesReportByCategory", reflect.TypeOf((*MockOrderServer)(nil).SalesReportByCategory), arg0, arg1)
}

// SalesReportByDate mocks base method.
func (m *MockOrderServer) SalesReportByDate(arg0 context.Context, arg1 *pb.SalesReportByDateRequest) (*pb.SalesReportByDateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SalesReportByDate", arg0, arg1)
	ret0, _ := ret[0].(*pb.SalesReportByDateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SalesReportByDate indicates an expected call of SalesReportByDate.
func (mr *MockOrderServerMockRecorder) SalesReportByDate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SalesReportByDate", reflect.TypeOf((*MockOrderServer)(nil).SalesReportByDate), arg0, arg1)
}

// SalesReportByPeriod mocks base method.
func (m *MockOrderServer) SalesReportByPeriod(arg0 context.Context, arg1 *pb.SalesReportByPeriodRequest) (*pb.SalesReportByPeriodResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SalesReportByPeriod", arg0, arg1)
	ret0, _ := ret[0].(*pb.SalesReportByPeriodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SalesReportByPeriod indicates an expected call of SalesReportByPeriod.
func (mr *MockOrderServerMockRecorder) SalesReportByPeriod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SalesReportByPeriod", reflect.TypeOf((*MockOrderServer)(nil).SalesReportByPeriod), arg0, arg1)
}

// SortOrderByStatus mocks base method.
func (m *MockOrderServer) SortOrderByStatus(arg0 context.Context, arg1 *pb.SortOrderByStatusRequest) (*pb.SortOrderByStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortOrderByStatus", arg0, arg1)
	ret0, _ := ret[0].(*pb.SortOrderByStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SortOrderByStatus indicates an expected call of SortOrderByStatus.
func (mr *MockOrderServerMockRecorder) SortOrderByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortOrderByStatus", reflect.TypeOf((*MockOrderServer)(nil).SortOrderByStatus), arg0, arg1)
}

// mustEmbedUnimplementedOrderServer mocks base method.
func (m *MockOrderServer) mustEmbedUnimplementedOrderServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrderServer")
}

// mustEmbedUnimplementedOrderServer indicates an expected call of mustEmbedUnimplementedOrderServer.
func (mr *MockOrderServerMockRecorder) mustEmbedUnimplementedOrderServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrderServer", reflect.TypeOf((*MockOrderServer)(nil).mustEmbedUnimplementedOrderServer))
}

// MockUnsafeOrderServer is a mock of UnsafeOrderServer interface.
type MockUnsafeOrderServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOrderServerMockRecorder
}

// MockUnsafeOrderServerMockRecorder is the mock recorder for MockUnsafeOrderServer.
type MockUnsafeOrderServerMockRecorder struct {
	mock *MockUnsafeOrderServer
}

// NewMockUnsafeOrderServer creates a new mock instance.
func NewMockUnsafeOrderServer(ctrl *gomock.Controller) *MockUnsafeOrderServer {
	mock := &MockUnsafeOrderServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOrderServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOrderServer) EXPECT() *MockUnsafeOrderServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOrderServer mocks base method.
func (m *MockUnsafeOrderServer) mustEmbedUnimplementedOrderServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrderServer")
}

// mustEmbedUnimplementedOrderServer indicates an expected call of mustEmbedUnimplementedOrderServer.
func (mr *MockUnsafeOrderServerMockRecorder) mustEmbedUnimplementedOrderServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrderServer", reflect.TypeOf((*MockUnsafeOrderServer)(nil).mustEmbedUnimplementedOrderServer))
}
