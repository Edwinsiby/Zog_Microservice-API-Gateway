// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MyServiceClient is the client API for MyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyServiceClient interface {
	MyMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	CreateUserWithOtp(ctx context.Context, in *CreateUserWithOtpRequest, opts ...grpc.CallOption) (*CreateUserWithOtpResponse, error)
	SignupOtpValidation(ctx context.Context, in *OtpValidationRequest, opts ...grpc.CallOption) (*OtpValidationResponse, error)
	LoginWithOtp(ctx context.Context, in *LoginWithOtpRequest, opts ...grpc.CallOption) (*LoginWithOtpResponse, error)
	LoginOtpValidation(ctx context.Context, in *OtpValidationRequest, opts ...grpc.CallOption) (*LoginOtpValidationResponse, error)
	LoginWithPassword(ctx context.Context, in *LoginWithPasswordRequest, opts ...grpc.CallOption) (*LoginWithPasswordResponse, error)
	RegisterAdmin(ctx context.Context, in *RegisterAdminRequest, opts ...grpc.CallOption) (*RegisterAdminResponse, error)
	AdminLoginWithPassword(ctx context.Context, in *LoginWithPasswordRequest, opts ...grpc.CallOption) (*LoginWithPasswordResponse, error)
}

type myServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyServiceClient(cc grpc.ClientConnInterface) MyServiceClient {
	return &myServiceClient{cc}
}

func (c *myServiceClient) MyMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.MyService/MyMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/pb.MyService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) CreateUserWithOtp(ctx context.Context, in *CreateUserWithOtpRequest, opts ...grpc.CallOption) (*CreateUserWithOtpResponse, error) {
	out := new(CreateUserWithOtpResponse)
	err := c.cc.Invoke(ctx, "/pb.MyService/CreateUserWithOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) SignupOtpValidation(ctx context.Context, in *OtpValidationRequest, opts ...grpc.CallOption) (*OtpValidationResponse, error) {
	out := new(OtpValidationResponse)
	err := c.cc.Invoke(ctx, "/pb.MyService/SignupOtpValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) LoginWithOtp(ctx context.Context, in *LoginWithOtpRequest, opts ...grpc.CallOption) (*LoginWithOtpResponse, error) {
	out := new(LoginWithOtpResponse)
	err := c.cc.Invoke(ctx, "/pb.MyService/LoginWithOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) LoginOtpValidation(ctx context.Context, in *OtpValidationRequest, opts ...grpc.CallOption) (*LoginOtpValidationResponse, error) {
	out := new(LoginOtpValidationResponse)
	err := c.cc.Invoke(ctx, "/pb.MyService/LoginOtpValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) LoginWithPassword(ctx context.Context, in *LoginWithPasswordRequest, opts ...grpc.CallOption) (*LoginWithPasswordResponse, error) {
	out := new(LoginWithPasswordResponse)
	err := c.cc.Invoke(ctx, "/pb.MyService/LoginWithPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) RegisterAdmin(ctx context.Context, in *RegisterAdminRequest, opts ...grpc.CallOption) (*RegisterAdminResponse, error) {
	out := new(RegisterAdminResponse)
	err := c.cc.Invoke(ctx, "/pb.MyService/RegisterAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) AdminLoginWithPassword(ctx context.Context, in *LoginWithPasswordRequest, opts ...grpc.CallOption) (*LoginWithPasswordResponse, error) {
	out := new(LoginWithPasswordResponse)
	err := c.cc.Invoke(ctx, "/pb.MyService/AdminLoginWithPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyServiceServer is the server API for MyService service.
// All implementations must embed UnimplementedMyServiceServer
// for forward compatibility
type MyServiceServer interface {
	MyMethod(context.Context, *Request) (*Response, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	CreateUserWithOtp(context.Context, *CreateUserWithOtpRequest) (*CreateUserWithOtpResponse, error)
	SignupOtpValidation(context.Context, *OtpValidationRequest) (*OtpValidationResponse, error)
	LoginWithOtp(context.Context, *LoginWithOtpRequest) (*LoginWithOtpResponse, error)
	LoginOtpValidation(context.Context, *OtpValidationRequest) (*LoginOtpValidationResponse, error)
	LoginWithPassword(context.Context, *LoginWithPasswordRequest) (*LoginWithPasswordResponse, error)
	RegisterAdmin(context.Context, *RegisterAdminRequest) (*RegisterAdminResponse, error)
	AdminLoginWithPassword(context.Context, *LoginWithPasswordRequest) (*LoginWithPasswordResponse, error)
	mustEmbedUnimplementedMyServiceServer()
}

// UnimplementedMyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMyServiceServer struct {
}

func (UnimplementedMyServiceServer) MyMethod(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyMethod not implemented")
}
func (UnimplementedMyServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMyServiceServer) CreateUserWithOtp(context.Context, *CreateUserWithOtpRequest) (*CreateUserWithOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserWithOtp not implemented")
}
func (UnimplementedMyServiceServer) SignupOtpValidation(context.Context, *OtpValidationRequest) (*OtpValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignupOtpValidation not implemented")
}
func (UnimplementedMyServiceServer) LoginWithOtp(context.Context, *LoginWithOtpRequest) (*LoginWithOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithOtp not implemented")
}
func (UnimplementedMyServiceServer) LoginOtpValidation(context.Context, *OtpValidationRequest) (*LoginOtpValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginOtpValidation not implemented")
}
func (UnimplementedMyServiceServer) LoginWithPassword(context.Context, *LoginWithPasswordRequest) (*LoginWithPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithPassword not implemented")
}
func (UnimplementedMyServiceServer) RegisterAdmin(context.Context, *RegisterAdminRequest) (*RegisterAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAdmin not implemented")
}
func (UnimplementedMyServiceServer) AdminLoginWithPassword(context.Context, *LoginWithPasswordRequest) (*LoginWithPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLoginWithPassword not implemented")
}
func (UnimplementedMyServiceServer) mustEmbedUnimplementedMyServiceServer() {}

// UnsafeMyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyServiceServer will
// result in compilation errors.
type UnsafeMyServiceServer interface {
	mustEmbedUnimplementedMyServiceServer()
}

func RegisterMyServiceServer(s grpc.ServiceRegistrar, srv MyServiceServer) {
	s.RegisterService(&MyService_ServiceDesc, srv)
}

func _MyService_MyMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).MyMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MyService/MyMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).MyMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MyService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_CreateUserWithOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserWithOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).CreateUserWithOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MyService/CreateUserWithOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).CreateUserWithOtp(ctx, req.(*CreateUserWithOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_SignupOtpValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtpValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).SignupOtpValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MyService/SignupOtpValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).SignupOtpValidation(ctx, req.(*OtpValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_LoginWithOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).LoginWithOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MyService/LoginWithOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).LoginWithOtp(ctx, req.(*LoginWithOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_LoginOtpValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtpValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).LoginOtpValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MyService/LoginOtpValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).LoginOtpValidation(ctx, req.(*OtpValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_LoginWithPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).LoginWithPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MyService/LoginWithPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).LoginWithPassword(ctx, req.(*LoginWithPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_RegisterAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).RegisterAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MyService/RegisterAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).RegisterAdmin(ctx, req.(*RegisterAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_AdminLoginWithPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).AdminLoginWithPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MyService/AdminLoginWithPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).AdminLoginWithPassword(ctx, req.(*LoginWithPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MyService_ServiceDesc is the grpc.ServiceDesc for MyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MyService",
	HandlerType: (*MyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MyMethod",
			Handler:    _MyService_MyMethod_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _MyService_CreateUser_Handler,
		},
		{
			MethodName: "CreateUserWithOtp",
			Handler:    _MyService_CreateUserWithOtp_Handler,
		},
		{
			MethodName: "SignupOtpValidation",
			Handler:    _MyService_SignupOtpValidation_Handler,
		},
		{
			MethodName: "LoginWithOtp",
			Handler:    _MyService_LoginWithOtp_Handler,
		},
		{
			MethodName: "LoginOtpValidation",
			Handler:    _MyService_LoginOtpValidation_Handler,
		},
		{
			MethodName: "LoginWithPassword",
			Handler:    _MyService_LoginWithPassword_Handler,
		},
		{
			MethodName: "RegisterAdmin",
			Handler:    _MyService_RegisterAdmin_Handler,
		},
		{
			MethodName: "AdminLoginWithPassword",
			Handler:    _MyService_AdminLoginWithPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// AdminDashboardClient is the client API for AdminDashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminDashboardClient interface {
	MyMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	SortUserByPermission(ctx context.Context, in *SortUserRequest, opts ...grpc.CallOption) (*SortUserResponse, error)
	SearchUserByname(ctx context.Context, in *SearchUserBynameRequest, opts ...grpc.CallOption) (*SearchUserBynameResponse, error)
	SearchUserByid(ctx context.Context, in *SearchUserByidRequest, opts ...grpc.CallOption) (*SearchUserByidResponse, error)
	TogglePermission(ctx context.Context, in *TogglePermissionRequest, opts ...grpc.CallOption) (*TogglePermissionResponse, error)
	CreateApparel(ctx context.Context, in *CreateApparelRequest, opts ...grpc.CallOption) (*CreateApparelResponse, error)
	EditApparel(ctx context.Context, in *EditApparelResquest, opts ...grpc.CallOption) (*EditApparelResponse, error)
	DeleteApparel(ctx context.Context, in *DeleteApparelRequest, opts ...grpc.CallOption) (*DeleteApparelResponse, error)
	AddCoupon(ctx context.Context, in *AddCouponRequest, opts ...grpc.CallOption) (*AddCouponResponse, error)
	AddOffer(ctx context.Context, in *AddOfferRequest, opts ...grpc.CallOption) (*AddOfferResponse, error)
}

type adminDashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminDashboardClient(cc grpc.ClientConnInterface) AdminDashboardClient {
	return &adminDashboardClient{cc}
}

func (c *adminDashboardClient) MyMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.AdminDashboard/MyMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminDashboardClient) UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminDashboard/UserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminDashboardClient) SortUserByPermission(ctx context.Context, in *SortUserRequest, opts ...grpc.CallOption) (*SortUserResponse, error) {
	out := new(SortUserResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminDashboard/SortUserByPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminDashboardClient) SearchUserByname(ctx context.Context, in *SearchUserBynameRequest, opts ...grpc.CallOption) (*SearchUserBynameResponse, error) {
	out := new(SearchUserBynameResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminDashboard/SearchUserByname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminDashboardClient) SearchUserByid(ctx context.Context, in *SearchUserByidRequest, opts ...grpc.CallOption) (*SearchUserByidResponse, error) {
	out := new(SearchUserByidResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminDashboard/SearchUserByid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminDashboardClient) TogglePermission(ctx context.Context, in *TogglePermissionRequest, opts ...grpc.CallOption) (*TogglePermissionResponse, error) {
	out := new(TogglePermissionResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminDashboard/TogglePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminDashboardClient) CreateApparel(ctx context.Context, in *CreateApparelRequest, opts ...grpc.CallOption) (*CreateApparelResponse, error) {
	out := new(CreateApparelResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminDashboard/CreateApparel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminDashboardClient) EditApparel(ctx context.Context, in *EditApparelResquest, opts ...grpc.CallOption) (*EditApparelResponse, error) {
	out := new(EditApparelResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminDashboard/EditApparel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminDashboardClient) DeleteApparel(ctx context.Context, in *DeleteApparelRequest, opts ...grpc.CallOption) (*DeleteApparelResponse, error) {
	out := new(DeleteApparelResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminDashboard/DeleteApparel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminDashboardClient) AddCoupon(ctx context.Context, in *AddCouponRequest, opts ...grpc.CallOption) (*AddCouponResponse, error) {
	out := new(AddCouponResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminDashboard/AddCoupon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminDashboardClient) AddOffer(ctx context.Context, in *AddOfferRequest, opts ...grpc.CallOption) (*AddOfferResponse, error) {
	out := new(AddOfferResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminDashboard/AddOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminDashboardServer is the server API for AdminDashboard service.
// All implementations must embed UnimplementedAdminDashboardServer
// for forward compatibility
type AdminDashboardServer interface {
	MyMethod(context.Context, *Request) (*Response, error)
	UserList(context.Context, *UserListRequest) (*UserListResponse, error)
	SortUserByPermission(context.Context, *SortUserRequest) (*SortUserResponse, error)
	SearchUserByname(context.Context, *SearchUserBynameRequest) (*SearchUserBynameResponse, error)
	SearchUserByid(context.Context, *SearchUserByidRequest) (*SearchUserByidResponse, error)
	TogglePermission(context.Context, *TogglePermissionRequest) (*TogglePermissionResponse, error)
	CreateApparel(context.Context, *CreateApparelRequest) (*CreateApparelResponse, error)
	EditApparel(context.Context, *EditApparelResquest) (*EditApparelResponse, error)
	DeleteApparel(context.Context, *DeleteApparelRequest) (*DeleteApparelResponse, error)
	AddCoupon(context.Context, *AddCouponRequest) (*AddCouponResponse, error)
	AddOffer(context.Context, *AddOfferRequest) (*AddOfferResponse, error)
	mustEmbedUnimplementedAdminDashboardServer()
}

// UnimplementedAdminDashboardServer must be embedded to have forward compatible implementations.
type UnimplementedAdminDashboardServer struct {
}

func (UnimplementedAdminDashboardServer) MyMethod(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyMethod not implemented")
}
func (UnimplementedAdminDashboardServer) UserList(context.Context, *UserListRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (UnimplementedAdminDashboardServer) SortUserByPermission(context.Context, *SortUserRequest) (*SortUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortUserByPermission not implemented")
}
func (UnimplementedAdminDashboardServer) SearchUserByname(context.Context, *SearchUserBynameRequest) (*SearchUserBynameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserByname not implemented")
}
func (UnimplementedAdminDashboardServer) SearchUserByid(context.Context, *SearchUserByidRequest) (*SearchUserByidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserByid not implemented")
}
func (UnimplementedAdminDashboardServer) TogglePermission(context.Context, *TogglePermissionRequest) (*TogglePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TogglePermission not implemented")
}
func (UnimplementedAdminDashboardServer) CreateApparel(context.Context, *CreateApparelRequest) (*CreateApparelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApparel not implemented")
}
func (UnimplementedAdminDashboardServer) EditApparel(context.Context, *EditApparelResquest) (*EditApparelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditApparel not implemented")
}
func (UnimplementedAdminDashboardServer) DeleteApparel(context.Context, *DeleteApparelRequest) (*DeleteApparelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApparel not implemented")
}
func (UnimplementedAdminDashboardServer) AddCoupon(context.Context, *AddCouponRequest) (*AddCouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCoupon not implemented")
}
func (UnimplementedAdminDashboardServer) AddOffer(context.Context, *AddOfferRequest) (*AddOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOffer not implemented")
}
func (UnimplementedAdminDashboardServer) mustEmbedUnimplementedAdminDashboardServer() {}

// UnsafeAdminDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminDashboardServer will
// result in compilation errors.
type UnsafeAdminDashboardServer interface {
	mustEmbedUnimplementedAdminDashboardServer()
}

func RegisterAdminDashboardServer(s grpc.ServiceRegistrar, srv AdminDashboardServer) {
	s.RegisterService(&AdminDashboard_ServiceDesc, srv)
}

func _AdminDashboard_MyMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminDashboardServer).MyMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminDashboard/MyMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminDashboardServer).MyMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminDashboard_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminDashboardServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminDashboard/UserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminDashboardServer).UserList(ctx, req.(*UserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminDashboard_SortUserByPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminDashboardServer).SortUserByPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminDashboard/SortUserByPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminDashboardServer).SortUserByPermission(ctx, req.(*SortUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminDashboard_SearchUserByname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserBynameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminDashboardServer).SearchUserByname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminDashboard/SearchUserByname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminDashboardServer).SearchUserByname(ctx, req.(*SearchUserBynameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminDashboard_SearchUserByid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserByidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminDashboardServer).SearchUserByid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminDashboard/SearchUserByid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminDashboardServer).SearchUserByid(ctx, req.(*SearchUserByidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminDashboard_TogglePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TogglePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminDashboardServer).TogglePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminDashboard/TogglePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminDashboardServer).TogglePermission(ctx, req.(*TogglePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminDashboard_CreateApparel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApparelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminDashboardServer).CreateApparel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminDashboard/CreateApparel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminDashboardServer).CreateApparel(ctx, req.(*CreateApparelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminDashboard_EditApparel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditApparelResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminDashboardServer).EditApparel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminDashboard/EditApparel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminDashboardServer).EditApparel(ctx, req.(*EditApparelResquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminDashboard_DeleteApparel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApparelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminDashboardServer).DeleteApparel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminDashboard/DeleteApparel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminDashboardServer).DeleteApparel(ctx, req.(*DeleteApparelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminDashboard_AddCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminDashboardServer).AddCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminDashboard/AddCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminDashboardServer).AddCoupon(ctx, req.(*AddCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminDashboard_AddOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminDashboardServer).AddOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminDashboard/AddOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminDashboardServer).AddOffer(ctx, req.(*AddOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminDashboard_ServiceDesc is the grpc.ServiceDesc for AdminDashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminDashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AdminDashboard",
	HandlerType: (*AdminDashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MyMethod",
			Handler:    _AdminDashboard_MyMethod_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _AdminDashboard_UserList_Handler,
		},
		{
			MethodName: "SortUserByPermission",
			Handler:    _AdminDashboard_SortUserByPermission_Handler,
		},
		{
			MethodName: "SearchUserByname",
			Handler:    _AdminDashboard_SearchUserByname_Handler,
		},
		{
			MethodName: "SearchUserByid",
			Handler:    _AdminDashboard_SearchUserByid_Handler,
		},
		{
			MethodName: "TogglePermission",
			Handler:    _AdminDashboard_TogglePermission_Handler,
		},
		{
			MethodName: "CreateApparel",
			Handler:    _AdminDashboard_CreateApparel_Handler,
		},
		{
			MethodName: "EditApparel",
			Handler:    _AdminDashboard_EditApparel_Handler,
		},
		{
			MethodName: "DeleteApparel",
			Handler:    _AdminDashboard_DeleteApparel_Handler,
		},
		{
			MethodName: "AddCoupon",
			Handler:    _AdminDashboard_AddCoupon_Handler,
		},
		{
			MethodName: "AddOffer",
			Handler:    _AdminDashboard_AddOffer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// UserDashboardClient is the client API for UserDashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDashboardClient interface {
	MyMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Home(ctx context.Context, in *HomeRequest, opts ...grpc.CallOption) (*HomeResponse, error)
	AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error)
	UserDetails(ctx context.Context, in *UserDetailsRequset, opts ...grpc.CallOption) (*UserDetailsResponse, error)
	Apparels(ctx context.Context, in *ApparelsRequest, opts ...grpc.CallOption) (*ApparelsResponse, error)
	ApparelDetails(ctx context.Context, in *ApparelDetailsRequest, opts ...grpc.CallOption) (*ApparelDetailsResponse, error)
	SearchApparels(ctx context.Context, in *SearchApparelsRequest, opts ...grpc.CallOption) (*SearchApparelsResponse, error)
	AddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*AddToCartResponse, error)
	AddToWishList(ctx context.Context, in *AddToWishListRequest, opts ...grpc.CallOption) (*AddToWishListResponse, error)
	Cart(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*CartResponse, error)
	CartList(ctx context.Context, in *CartListRequest, opts ...grpc.CallOption) (*CartListResponse, error)
	RemoveFromCart(ctx context.Context, in *RemoveFromCartRequest, opts ...grpc.CallOption) (*RemoveFromCartResponse, error)
	RemoveFromWishlist(ctx context.Context, in *RemoveFromWishlistRequest, opts ...grpc.CallOption) (*RemoveFromWishlistResponse, error)
	Wishlist(ctx context.Context, in *WishlistRequest, opts ...grpc.CallOption) (*WishlistResponse, error)
	AvailableCoupons(ctx context.Context, in *AvailableCouponsRequest, opts ...grpc.CallOption) (*AvailableCouponsResponse, error)
	ApplyCoupon(ctx context.Context, in *ApplyCouponRequest, opts ...grpc.CallOption) (*ApplyCouponResponse, error)
	OfferCheck(ctx context.Context, in *OfferCheckRequest, opts ...grpc.CallOption) (*OfferCheckResponse, error)
}

type userDashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDashboardClient(cc grpc.ClientConnInterface) UserDashboardClient {
	return &userDashboardClient{cc}
}

func (c *userDashboardClient) MyMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/MyMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) Home(ctx context.Context, in *HomeRequest, opts ...grpc.CallOption) (*HomeResponse, error) {
	out := new(HomeResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/Home", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error) {
	out := new(AddAddressResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/AddAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) UserDetails(ctx context.Context, in *UserDetailsRequset, opts ...grpc.CallOption) (*UserDetailsResponse, error) {
	out := new(UserDetailsResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/UserDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) Apparels(ctx context.Context, in *ApparelsRequest, opts ...grpc.CallOption) (*ApparelsResponse, error) {
	out := new(ApparelsResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/Apparels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) ApparelDetails(ctx context.Context, in *ApparelDetailsRequest, opts ...grpc.CallOption) (*ApparelDetailsResponse, error) {
	out := new(ApparelDetailsResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/ApparelDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) SearchApparels(ctx context.Context, in *SearchApparelsRequest, opts ...grpc.CallOption) (*SearchApparelsResponse, error) {
	out := new(SearchApparelsResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/SearchApparels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) AddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*AddToCartResponse, error) {
	out := new(AddToCartResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/AddToCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) AddToWishList(ctx context.Context, in *AddToWishListRequest, opts ...grpc.CallOption) (*AddToWishListResponse, error) {
	out := new(AddToWishListResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/AddToWishList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) Cart(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/Cart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) CartList(ctx context.Context, in *CartListRequest, opts ...grpc.CallOption) (*CartListResponse, error) {
	out := new(CartListResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/CartList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) RemoveFromCart(ctx context.Context, in *RemoveFromCartRequest, opts ...grpc.CallOption) (*RemoveFromCartResponse, error) {
	out := new(RemoveFromCartResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/RemoveFromCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) RemoveFromWishlist(ctx context.Context, in *RemoveFromWishlistRequest, opts ...grpc.CallOption) (*RemoveFromWishlistResponse, error) {
	out := new(RemoveFromWishlistResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/RemoveFromWishlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) Wishlist(ctx context.Context, in *WishlistRequest, opts ...grpc.CallOption) (*WishlistResponse, error) {
	out := new(WishlistResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/Wishlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) AvailableCoupons(ctx context.Context, in *AvailableCouponsRequest, opts ...grpc.CallOption) (*AvailableCouponsResponse, error) {
	out := new(AvailableCouponsResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/AvailableCoupons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) ApplyCoupon(ctx context.Context, in *ApplyCouponRequest, opts ...grpc.CallOption) (*ApplyCouponResponse, error) {
	out := new(ApplyCouponResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/ApplyCoupon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) OfferCheck(ctx context.Context, in *OfferCheckRequest, opts ...grpc.CallOption) (*OfferCheckResponse, error) {
	out := new(OfferCheckResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/OfferCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDashboardServer is the server API for UserDashboard service.
// All implementations must embed UnimplementedUserDashboardServer
// for forward compatibility
type UserDashboardServer interface {
	MyMethod(context.Context, *Request) (*Response, error)
	Home(context.Context, *HomeRequest) (*HomeResponse, error)
	AddAddress(context.Context, *AddAddressRequest) (*AddAddressResponse, error)
	UserDetails(context.Context, *UserDetailsRequset) (*UserDetailsResponse, error)
	Apparels(context.Context, *ApparelsRequest) (*ApparelsResponse, error)
	ApparelDetails(context.Context, *ApparelDetailsRequest) (*ApparelDetailsResponse, error)
	SearchApparels(context.Context, *SearchApparelsRequest) (*SearchApparelsResponse, error)
	AddToCart(context.Context, *AddToCartRequest) (*AddToCartResponse, error)
	AddToWishList(context.Context, *AddToWishListRequest) (*AddToWishListResponse, error)
	Cart(context.Context, *CartRequest) (*CartResponse, error)
	CartList(context.Context, *CartListRequest) (*CartListResponse, error)
	RemoveFromCart(context.Context, *RemoveFromCartRequest) (*RemoveFromCartResponse, error)
	RemoveFromWishlist(context.Context, *RemoveFromWishlistRequest) (*RemoveFromWishlistResponse, error)
	Wishlist(context.Context, *WishlistRequest) (*WishlistResponse, error)
	AvailableCoupons(context.Context, *AvailableCouponsRequest) (*AvailableCouponsResponse, error)
	ApplyCoupon(context.Context, *ApplyCouponRequest) (*ApplyCouponResponse, error)
	OfferCheck(context.Context, *OfferCheckRequest) (*OfferCheckResponse, error)
	mustEmbedUnimplementedUserDashboardServer()
}

// UnimplementedUserDashboardServer must be embedded to have forward compatible implementations.
type UnimplementedUserDashboardServer struct {
}

func (UnimplementedUserDashboardServer) MyMethod(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyMethod not implemented")
}
func (UnimplementedUserDashboardServer) Home(context.Context, *HomeRequest) (*HomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Home not implemented")
}
func (UnimplementedUserDashboardServer) AddAddress(context.Context, *AddAddressRequest) (*AddAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (UnimplementedUserDashboardServer) UserDetails(context.Context, *UserDetailsRequset) (*UserDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDetails not implemented")
}
func (UnimplementedUserDashboardServer) Apparels(context.Context, *ApparelsRequest) (*ApparelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apparels not implemented")
}
func (UnimplementedUserDashboardServer) ApparelDetails(context.Context, *ApparelDetailsRequest) (*ApparelDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApparelDetails not implemented")
}
func (UnimplementedUserDashboardServer) SearchApparels(context.Context, *SearchApparelsRequest) (*SearchApparelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchApparels not implemented")
}
func (UnimplementedUserDashboardServer) AddToCart(context.Context, *AddToCartRequest) (*AddToCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedUserDashboardServer) AddToWishList(context.Context, *AddToWishListRequest) (*AddToWishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWishList not implemented")
}
func (UnimplementedUserDashboardServer) Cart(context.Context, *CartRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cart not implemented")
}
func (UnimplementedUserDashboardServer) CartList(context.Context, *CartListRequest) (*CartListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartList not implemented")
}
func (UnimplementedUserDashboardServer) RemoveFromCart(context.Context, *RemoveFromCartRequest) (*RemoveFromCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromCart not implemented")
}
func (UnimplementedUserDashboardServer) RemoveFromWishlist(context.Context, *RemoveFromWishlistRequest) (*RemoveFromWishlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWishlist not implemented")
}
func (UnimplementedUserDashboardServer) Wishlist(context.Context, *WishlistRequest) (*WishlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wishlist not implemented")
}
func (UnimplementedUserDashboardServer) AvailableCoupons(context.Context, *AvailableCouponsRequest) (*AvailableCouponsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableCoupons not implemented")
}
func (UnimplementedUserDashboardServer) ApplyCoupon(context.Context, *ApplyCouponRequest) (*ApplyCouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyCoupon not implemented")
}
func (UnimplementedUserDashboardServer) OfferCheck(context.Context, *OfferCheckRequest) (*OfferCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfferCheck not implemented")
}
func (UnimplementedUserDashboardServer) mustEmbedUnimplementedUserDashboardServer() {}

// UnsafeUserDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDashboardServer will
// result in compilation errors.
type UnsafeUserDashboardServer interface {
	mustEmbedUnimplementedUserDashboardServer()
}

func RegisterUserDashboardServer(s grpc.ServiceRegistrar, srv UserDashboardServer) {
	s.RegisterService(&UserDashboard_ServiceDesc, srv)
}

func _UserDashboard_MyMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).MyMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/MyMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).MyMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_Home_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).Home(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/Home",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).Home(ctx, req.(*HomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/AddAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).AddAddress(ctx, req.(*AddAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_UserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetailsRequset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).UserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/UserDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).UserDetails(ctx, req.(*UserDetailsRequset))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_Apparels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApparelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).Apparels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/Apparels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).Apparels(ctx, req.(*ApparelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_ApparelDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApparelDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).ApparelDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/ApparelDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).ApparelDetails(ctx, req.(*ApparelDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_SearchApparels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchApparelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).SearchApparels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/SearchApparels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).SearchApparels(ctx, req.(*SearchApparelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/AddToCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).AddToCart(ctx, req.(*AddToCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_AddToWishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToWishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).AddToWishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/AddToWishList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).AddToWishList(ctx, req.(*AddToWishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_Cart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).Cart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/Cart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).Cart(ctx, req.(*CartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_CartList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).CartList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/CartList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).CartList(ctx, req.(*CartListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_RemoveFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).RemoveFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/RemoveFromCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).RemoveFromCart(ctx, req.(*RemoveFromCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_RemoveFromWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromWishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).RemoveFromWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/RemoveFromWishlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).RemoveFromWishlist(ctx, req.(*RemoveFromWishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_Wishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).Wishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/Wishlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).Wishlist(ctx, req.(*WishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_AvailableCoupons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableCouponsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).AvailableCoupons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/AvailableCoupons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).AvailableCoupons(ctx, req.(*AvailableCouponsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_ApplyCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).ApplyCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/ApplyCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).ApplyCoupon(ctx, req.(*ApplyCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_OfferCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).OfferCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/OfferCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).OfferCheck(ctx, req.(*OfferCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDashboard_ServiceDesc is the grpc.ServiceDesc for UserDashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserDashboard",
	HandlerType: (*UserDashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MyMethod",
			Handler:    _UserDashboard_MyMethod_Handler,
		},
		{
			MethodName: "Home",
			Handler:    _UserDashboard_Home_Handler,
		},
		{
			MethodName: "AddAddress",
			Handler:    _UserDashboard_AddAddress_Handler,
		},
		{
			MethodName: "UserDetails",
			Handler:    _UserDashboard_UserDetails_Handler,
		},
		{
			MethodName: "Apparels",
			Handler:    _UserDashboard_Apparels_Handler,
		},
		{
			MethodName: "ApparelDetails",
			Handler:    _UserDashboard_ApparelDetails_Handler,
		},
		{
			MethodName: "SearchApparels",
			Handler:    _UserDashboard_SearchApparels_Handler,
		},
		{
			MethodName: "AddToCart",
			Handler:    _UserDashboard_AddToCart_Handler,
		},
		{
			MethodName: "AddToWishList",
			Handler:    _UserDashboard_AddToWishList_Handler,
		},
		{
			MethodName: "Cart",
			Handler:    _UserDashboard_Cart_Handler,
		},
		{
			MethodName: "CartList",
			Handler:    _UserDashboard_CartList_Handler,
		},
		{
			MethodName: "RemoveFromCart",
			Handler:    _UserDashboard_RemoveFromCart_Handler,
		},
		{
			MethodName: "RemoveFromWishlist",
			Handler:    _UserDashboard_RemoveFromWishlist_Handler,
		},
		{
			MethodName: "Wishlist",
			Handler:    _UserDashboard_Wishlist_Handler,
		},
		{
			MethodName: "AvailableCoupons",
			Handler:    _UserDashboard_AvailableCoupons_Handler,
		},
		{
			MethodName: "ApplyCoupon",
			Handler:    _UserDashboard_ApplyCoupon_Handler,
		},
		{
			MethodName: "OfferCheck",
			Handler:    _UserDashboard_OfferCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderClient interface {
	MyMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) MyMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Order/MyMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
// All implementations must embed UnimplementedOrderServer
// for forward compatibility
type OrderServer interface {
	MyMethod(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedOrderServer()
}

// UnimplementedOrderServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServer struct {
}

func (UnimplementedOrderServer) MyMethod(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyMethod not implemented")
}
func (UnimplementedOrderServer) mustEmbedUnimplementedOrderServer() {}

// UnsafeOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServer will
// result in compilation errors.
type UnsafeOrderServer interface {
	mustEmbedUnimplementedOrderServer()
}

func RegisterOrderServer(s grpc.ServiceRegistrar, srv OrderServer) {
	s.RegisterService(&Order_ServiceDesc, srv)
}

func _Order_MyMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).MyMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Order/MyMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).MyMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Order_ServiceDesc is the grpc.ServiceDesc for Order service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Order_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MyMethod",
			Handler:    _Order_MyMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
